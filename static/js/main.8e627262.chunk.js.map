{"version":3,"sources":["components/card.jsx","components/cardlist.jsx","components/form.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Card","profile","this","props","className","src","avatar_url","alt","name","company","location","bio","href","html_url","target","rel","id","public_repos","followers","following","Component","CardList","profiles","map","key","Form","state","userName","handleSubmit","event","a","preventDefault","axios","require","get","resp","onSubmit","data","setState","type","value","onChange","placeholder","required","App","addNewProfile","profileData","prevState","title","React","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4SA2BeA,G,4KApBP,IAAMC,EAAUC,KAAKC,MACrB,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,QAAQC,IAAKJ,EAAQK,WAAYC,IAAI,WACpD,yBAAKH,UAAU,QACX,yBAAKA,UAAU,QAAQH,EAAQO,MAC/B,yBAAKJ,UAAU,WAAWH,EAAQQ,SAClC,yBAAKL,UAAU,YAAYH,EAAQS,UACnC,uBAAGN,UAAU,OAAM,wCAAoBH,EAAQU,KAC/C,yBAAKP,UAAU,QAAf,gBAAmC,uBAAGQ,KAAMX,EAAQY,SAAUC,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,yBACrH,yBAAKA,UAAU,YACX,0BAAMA,UAAU,OAAhB,UAA6B,0BAAMY,GAAG,KAAKf,EAAQgB,eACnD,0BAAMb,UAAU,OAAhB,cAAiC,0BAAMY,GAAG,KAAKf,EAAQiB,YACvD,0BAAMd,UAAU,OAAhB,cAAiC,0BAAMY,GAAG,KAAKf,EAAQkB,mB,GAf5DC,cCMJC,EANE,SAAClB,GAAD,OACb,yBAAKC,UAAU,aACVD,EAAMmB,SAASC,KAAI,SAAAtB,GAAO,OAAI,kBAAC,EAAD,eAAMuB,IAAKvB,EAAQe,IAAQf,S,wBC4BnDwB,G,kNA/BXC,MAAQ,CACJC,SAAS,I,EAEbC,a,uCAAe,WAAOC,GAAP,iBAAAC,EAAA,6DACXD,EAAME,iBACAC,EAAQC,EAAQ,IAFX,SAGQD,EAAME,IAAN,uCAA0C,EAAKR,MAAMC,WAH7D,OAGLQ,EAHK,OAIX,EAAKhC,MAAMiC,SAASD,EAAKE,MACzB,EAAKC,SAAS,CAACX,SAAW,KALf,2C,6GAOL,IAAD,OACL,OACI,6BACI,0BAAMvB,UAAY,OAAOgC,SAAUlC,KAAK0B,cACxC,uBAAGxB,UAAU,kBACb,yBAAKA,UAAU,eACd,2BAAOA,UAAU,eAAjB,mBACO,2BACAA,UAAU,SACVmC,KAAK,OACLC,MAAOtC,KAAKwB,MAAMC,SAClBc,SAAU,SAAAZ,GAAK,OAAI,EAAKS,SAAS,CAAEX,SAAWE,EAAMf,OAAO0B,SAC3DE,YAAY,GAAGC,UAAQ,KAE3B,4BAAQvC,UAAU,UAAlB,kB,GAzBDgB,cCuBJwB,G,kNApBblB,MAAQ,CACNJ,SAAU,I,EAEZuB,cAAgB,SAACC,GACf,EAAKR,UAAS,SAAAS,GAAS,MAAK,CAC1BzB,SAAS,GAAD,mBAAMyB,EAAUzB,UAAhB,CAA0BwB,S,uDAIpC,OACE,6BACE,yBAAK1C,UAAU,UACb,4BAAKF,KAAKC,MAAM6C,QAElB,kBAAC,EAAD,CAAMZ,SAAUlC,KAAK2C,gBACrB,kBAAC,EAAD,CAAUvB,SAAUpB,KAAKwB,MAAMJ,gB,GAhBrB2B,IAAM7B,YCOJ8B,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKR,MAAM,sBAEbS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8e627262.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/card.css';\n\n\n\nclass Card extends Component{\n    render() {\n        const profile = this.props;\n        return (\n            <div className=\"github-profile\">\n                <img className=\"image\" src={profile.avatar_url} alt=\"no-img\"/>\n                <div className=\"info\">\n                    <div className=\"name\">{profile.name}</div>\n                    <div className=\"company\">{profile.company}</div>\n                    <div className=\"location\">{profile.location}</div>\n                    <p className=\"bio\"><span>Bio : </span>{profile.bio}</p>\n                    <div className=\"link\">Open Repos : <a href={profile.html_url} target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fas fa-code-branch\"></i></a></div>\n                    <div className=\"num-info\">\n                        <span className=\"num\">Repos: <span id=\"n\">{profile.public_repos}</span></span>\n                        <span className=\"num\">Followers: <span id=\"n\">{profile.followers}</span></span>\n                        <span className=\"num\">Following: <span id=\"n\">{profile.following}</span></span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Card;","import React from 'react'\nimport Card from \"./card\"\nimport '../styles/card.css'\n\n\nconst CardList = (props) => (\n    <div className=\"card-list\">\n        {props.profiles.map(profile => <Card key={profile.id} {...profile} />)}\n    </div>\n);\n\nexport default CardList;","import React, { Component } from 'react';\nimport '../styles/form.css';\n\nclass Form extends Component {\n    state = {\n        userName:\"\"\n    };\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const axios = require('axios');\n        const resp = await axios.get(`https://api.github.com/users/${this.state.userName}`);\n        this.props.onSubmit(resp.data);\n        this.setState({userName : \"\"})\n    };\n    render() {\n        return (\n            <div>\n                <form className = \"form\" onSubmit={this.handleSubmit}>\n                <i className=\"fab fa-github\"></i>\n                <div className=\"input-field\">\n                 <label className=\"placeholder\">GitHub Username</label>\n                        <input \n                        className=\"effect\"\n                        type=\"text\" \n                        value={this.state.userName}\n                        onChange={event => this.setState({ userName : event.target.value })}\n                        placeholder=\"\" required/>\n                    </div>\n                    <button className=\"button\">Get Info</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Form;","import React from 'react';\nimport CardList from './cardlist';\nimport Form from './form';\nimport '../styles/App.css';\n\nclass App extends React.Component {\n  state = {\n    profiles: [],\n  };\n  addNewProfile = (profileData) =>{\n    this.setState(prevState => ({\n      profiles: [...prevState.profiles, profileData],\n    }));\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n          <h1>{this.props.title}</h1>\n        </div>\n        <Form onSubmit={this.addNewProfile} />\n        <CardList profiles={this.state.profiles} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App title=\"GitHub Cards App\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}